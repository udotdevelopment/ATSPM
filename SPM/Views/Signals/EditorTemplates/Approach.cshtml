@model MOE.Common.Models.Approach


<div id="ApproachConfiguration_@(Model.ApproachID)" role="tablist" aria-multiselectable="true" class="col-md-12">
    <div class="panel panel-approach">
        <div class="panel-heading" role="tab" id="ApproachConfigurationHeading_@Model.ApproachID">
            <h5 class="panel-title">
                <a id="ApproachConfigurationHeader_@(Model.ApproachID)" data-toggle="collapse" data-parent="#ApproachConfiguration_@(Model.ApproachID)" href="#ApproachConfigurationCollapse_@(Model.ApproachID)" aria-expanded="false" aria-controls="ApproachConfigurationCollapse_@(Model.ApproachID)">
                    @Model.Description &nbsp;&nbsp; (@Model.Detectors.Count&nbsp; Detector(s))
                </a>
                
                <a class="pull-right" href="javascript:DeleteApproach(@Model.ApproachID, '@Model.Description')">Delete &nbsp;<span class="glyphicon glyphicon-remove" aria-hidden="true"></span></a>
                <a class="pull-right" href="javascript:CopyApproach(@Model.ApproachID)">Copy &nbsp;<span class="glyphicon glyphicon-copy" aria-hidden="true"></span></a>                &nbsp;                
            </h5>
        </div>
        <div id="ApproachConfigurationCollapse_@(Model.ApproachID)" class="panel-collapse collapse panel-body" role="tabpanel">
            @Html.HiddenFor(model => model.ApproachID)
            @Html.HiddenFor(model => model.SignalID)
            @Html.HiddenFor(model => model.Index, new { @id = "Index" + @Model.ApproachID })
            @Html.HiddenFor(model => model.MPH, new { @class = "mph_" + @Model.ApproachID })
            <div class="form-group-configuration-tool  form-group col-md-2">
                @Html.LabelFor(model => model.DirectionTypeID, "Direction", htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.DropDownListFor(model => model.DirectionTypeID, (SelectList)ViewBag.DirectionType, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.DirectionTypeID, "", new { id = "DirectionTypeID-error", @class = "text-danger" })
                </div>
            </div>

            <div class="form-group-configuration-tool  form-group col-md-3">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { id = "Description-error", @class = "text-danger" })
                </div>
            </div>
            <div class="form-group-configuration-tool  form-group col-md-2">
                @Html.LabelFor(model => model.ProtectedPhaseNumber, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    @Html.EditorFor(model => model.ProtectedPhaseNumber, new { htmlAttributes = new { @class = "form-control" } })                    
                    @Html.ValidationMessageFor(model => model.ProtectedPhaseNumber, "", new { id = "ProtectedPhaseNumber-error", @class = "text-danger" })
                </div>
            </div>
            <div class="form-group-configuration-tool  form-group col-md-2">
                @Html.LabelFor(model => model.PermissivePhaseNumber, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    @Html.EditorFor(model => model.PermissivePhaseNumber, new { htmlAttributes = new { @class = "form-control" } })                    
                    @Html.ValidationMessageFor(model => model.PermissivePhaseNumber, "", new { id = "PermissivePhaseNumber-error", @class = "text-danger" })
                </div>
            </div>
            <div class="form-group-configuration-tool  form-group col-md-2">
                @Html.LabelFor(model => model.IsProtectedPhaseOverlap, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    @Html.EditorFor(model => model.IsProtectedPhaseOverlap, new { htmlAttributes = new { @class = "control-label" } })
                </div>
            </div>
            <div id="DetectorsList_@Model.ApproachID" class="center-block col-md-12">
                @Html.LabelFor(model => model.Detectors, htmlAttributes: new { @class = "control-label" })
                <span onclick="GetCreateNewDetector('@Model.ApproachID')" class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span>

                @Html.EditorFor(model => model.Detectors, new { @class = "" })

            </div>
    </div>
</div>
</div>