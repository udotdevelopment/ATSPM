@using MvcCheckBoxList.Model
@model MOE.Common.Models.Detector


<div id="DetectorConfiguration@(Model.ID)" role="tablist" aria-multiselectable="true" class="col-md-12">
    <div class="panel panel-detector">
        <div class="panel-heading" role="tab" id="DetectorConfigurationHeading@Model.ApproachID">
            <h4 class="panel-title">
                <a id="DetectorConfigurationHeader@(Model.ID)" data-toggle="collapse" data-parent="#DetectorConfiguration@(Model.ID)" href="#DetectorConfigurationCollapse@(Model.ID)" aria-expanded="false" aria-controls="DetectorConfigurationCollapse@(Model.ID)">
                    Detector @Model.DetectorID
                </a>
                <a class="pull-right" href="javascript:DeleteDetector('@Model.DetectorID',@Model.ID)">Delete&nbsp;<span class="glyphicon glyphicon-remove" aria-hidden="true"></span></a>
                <a class="pull-right" href="javascript:CopyDetector('@Model.ID', @Model.ApproachID)">Copy&nbsp;<span class="glyphicon glyphicon-copy" aria-hidden="true"></span></a>
            </h4>
        </div>
        <div id="DetectorConfigurationCollapse@(Model.ID)" class="panel-collapse panel-body in collapse ControlHeader" role="tabpanel" aria-labelledby="headingOne">
            <input type="hidden" name="@(Model.Index)ID" id="ID_@Model.ID" value="@Model.ID" />
                   @Html.HiddenFor(model => model.DetectorID, new { Name = Model.Index + "DetectorID" })
                   @Html.HiddenFor(model => model.ApproachID, new { Name = Model.Index + "ApproachID" })<div class="form-group col-md-4">
                <div class="">
                    @Html.LabelFor(model => model.DetChannel, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.DetChannel, new { htmlAttributes = new { Name = Model.Index + "DetChannel", @class = "form-control detectorChannel", @onblur = "CheckForDuplicatChannels()" } })
                        @Html.ValidationMessageFor(model => model.DetChannel, "", new { id = "DetChannel-error", @class = "text-danger" })
                    </div>
                </div>
                <div class="">
                    @Html.LabelFor(model => model.DetectionTypes, htmlAttributes: new { @class = "control-label" })
                    <div>

                        @Html.CheckBoxListFor(x => x.DetectionIDs,
                                x => x.AllDetectionTypes,
                                x => x.DetectionTypeID,
                                x => x.Description,
                                x => x.DetectionTypes,
                                         Position.Vertical,
                                                           x => new { @class = "DetectionTypes_" + @Model.ID, Name = Model.Index + "DetectionIDs", @onclick = "ShowHideDetectionTypeOptions(this,'" + @Model.ID + "')" })
                    </div>
                </div>
            </div>
            <div class="form-group form-group col-md-4">
                <div class="DetectionHardware_@Model.ID ">
                    @Html.LabelFor(model => model.DetectionHardwareID, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.DropDownListFor(model => model.DetectionHardwareID, (SelectList)ViewBag.DetectionHardware, htmlAttributes: new { Name = Model.Index + "DetectionHardwareID", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.DetectionHardwareID, "", new { id = "DetectionHardwareID-error", @class = "text-danger" })
                    </div>
                </div>
                <div id="LaneNumber_@Model.ID" class="">
                    @Html.LabelFor(model => model.LaneNumber, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.LaneNumber, new { htmlAttributes = new { Name = Model.Index + "LaneNumber", @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LaneNumber, "", new { id = "LaneNumber-error", @class = "text-danger" })
                    </div>
                </div>
                <div class="Lanes_@Model.ID">
                    @Html.LabelFor(model => model.MovementTypeID, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.DropDownListFor(model => model.MovementTypeID, (SelectList)ViewBag.MovementType, htmlAttributes: new { Name = Model.Index + "MovementTypeID", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.MovementTypeID, "", new { id = "MovementTypeID-error", @class = "text-danger" })
                    </div>
                </div>
                <div class="Lanes_@Model.ID">
                    @Html.LabelFor(model => model.LaneTypeID, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.DropDownListFor(model => model.LaneTypeID, (SelectList)ViewBag.LaneType, htmlAttributes: new { Name = Model.Index + "LaneTypeID", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LaneTypeID, "", new { id = "LaneTypeID-error", @class = "text-danger" })
                    </div>
                </div>
                <div id="MPHDiv_@Model.ID" class="@(Model.DetectionTypeIDs.Contains(2) ? "" : "hidden") @(Model.DetectionTypeIDs.Contains(3) ? "" : "hidden")">
                    <label for="mph_@Model.ID" class="control-label mph">MPH (Advanced Count, Advanced Speed)</label>
                    <input id="mph_@Model.ID" name="@Model.Index+'MPH'" class="form-control mph_@Model.ApproachID" onkeyup="SyncText(this, @Model.ApproachID)" type="text" value="@Model.Approach.MPH" />
                </div>

                <div id="DistanceFromStopBar_@Model.ID" class="PCD_@Model.ID @(Model.DetectionTypeIDs.Contains(2) ? "" : "hidden")">
                    @Html.LabelFor(model => model.DistanceFromStopBar, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.DistanceFromStopBar, new { htmlAttributes = new { Name = Model.Index + "DistanceFromStopBar", @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DistanceFromStopBar, "", new { id = "DistanceFromStopBar-error", @class = "text-danger" })
                    </div>
                </div>
                <div id="Min_Speed_Filter_@Model.ID" class="Speed_@Model.ID  @(Model.DetectionTypeIDs.Contains(3) ? "" : "hidden")">
                    @Html.LabelFor(model => model.MinSpeedFilter, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.MinSpeedFilter, new { htmlAttributes = new { Name = Model.Index + "MinSpeedFilter", @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MinSpeedFilter, "", new { id = "MinSpeedFilter-error", @class = "text-danger" })
                    </div>
                </div>
                <div class="PCD_@Model.ID @(Model.DetectionTypeIDs.Contains(2) ? "" : "hidden")">
                    @Html.LabelFor(model => model.DecisionPoint, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.DecisionPoint, new { htmlAttributes = new { Name = Model.Index + "DecisionPoint", @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DecisionPoint, "", new { id = "DecisionPoint-error", @class = "text-danger" })
                    </div>
                </div>

                <div class="Speed_@Model.ID @(Model.DetectionTypeIDs.Contains(3) ? "" : "hidden")">
                    @Html.LabelFor(model => model.MovementDelay, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.MovementDelay, new { htmlAttributes = new { Name = Model.Index + "MovementDelay", @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MovementDelay, "", new { id = "MovementDelay-error", @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group col-md-4">
                <div class="">
                    @Html.LabelFor(model => model.DateAdded, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.DateAdded, new { htmlAttributes = new { Name = Model.Index + "DateAdded", @class = "form-control datepicker" } })
                        @Html.ValidationMessageFor(model => model.DateAdded, "", new { id = "DateAdded-error", @class = "text-danger" })
                    </div>
                </div>

                <div class="">
                    @Html.LabelFor(model => model.DetectorComments, htmlAttributes: new { @class = "control-label" })
                    <span onclick="GetCreateDetectorComment('@Model.ID')" class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span>
                    <div id="NewDetectorComment_@Model.ID"></div>
                    <div class="comments col-md-12">
                        <div id="AddedDetectorComment_@Model.ID"></div>
                        @Html.EditorFor(model => model.DetectorComments, new { htmlAttributes = new { Name = Model.Index + "DetectorComments", @class = "form-control" } })
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>